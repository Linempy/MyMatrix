//
// Created by mazin on 30.03.2025.
//

#ifndef MYMATRIX_MTX_OPS_H
#define MYMATRIX_MTX_OPS_H

#include <stdio.h>
#include <stdbool.h>
#include "mtx_core.h"

/**
 * @brief Поэлементное сложение матриц (m1 += m2).
 * @param m1 Указатель на первую матрицу (результирующая матрица)
 * @param m2 Указатель на вторую матрицу (слагаемое)
 * @return 0 при успехе, -1 если размеры матриц не совпадают
 */
int matrixAdd(Matrix *m1, const Matrix *m2);

/**
 * @brief Поэлементное вычитание матриц (m1 -= m2).
 * @param m1 Указатель на первую матрицу (результирующая)
 * @param m2 Указатель на вторую матрицу (вычитаемое)
 * @return 0 при успехе, -1 если размеры матриц не совпадают
 */
int matrixSub(Matrix *m1, const Matrix *m2);

/**
 * @brief Умножение всех элементов матрицы на скаляр (m *= d).
 * @param m Указатель на матрицу
 * @param d Скалярный множитель
 * @return 0 при успехе, -1 если некорректные данные
 */
int matrixSMul(Matrix *m, double d);

/**
 * @brief Деление всех элементов матрицы на скаляр (m /= d).
 * @param m Указатель на матрицу
 * @param d Скалярный делитель
 * @return 0 при успехе, -1 при попытке деления на ноль
 */
int matrixSDiv(Matrix *m, double d);

/**
 * @brief Поэлементное сложение двух матриц с сохранением в третью (m = m1 + m2).
 * @param m Указатель на результирующую матрицу
 * @param m1 Указатель на первую матрицу-слагаемое
 * @param m2 Указатель на вторую матрицу-слагаемое
 * @return 0 при успехе, -1 если размеры матриц не совпадают
 * @note Матрица m должна быть заранее инициализирована с правильными размерами
 */
int matrixAddTwo(Matrix *m, const Matrix *m1, const Matrix *m2);

/**
 * @brief Поэлементное вычитание двух матриц с сохранением в третью (m = m1 - m2).
 * @param m Указатель на результирующую матрицу
 * @param m1 Указатель на матрицу-уменьшаемое
 * @param m2 Указатель на матрицу-вычитаемое
 * @return 0 при успехе, -1 если размеры матриц не совпадают
 */
int matrixSubTwo(Matrix *m, const Matrix *m1, const Matrix *m2);

/**
 * @brief Умножение матрицы на скаляр с сохранением в другую матрицу (m = m1 * d).
 * @param m Указатель на результирующую матрицу
 * @param m1 Указатель на исходную матрицу
 * @param d Скалярный множитель
 * @return 0 при успехе, -1 если некорректные данные
 */
int matrixSMulTwo(Matrix *m, const Matrix *m1, double d);

/**
 * @brief Деление матрицы на скаляр с сохранением в другую матрицу (m = m1 / d).
 * @param m Указатель на результирующую матрицу
 * @param m1 Указатель на исходную матрицу
 * @param d Скалярный делитель
 * @return 0 при успехе, -1 при попытке деления на ноль
 */
int matrixSDivTwo(Matrix *m, const Matrix *m1, double d);

/**
 * @brief Матричное умножение (m1 *= m2).
 * @param m1 Указатель на первую матрицу (должна быть размера n×m)
 * @param m2 Указатель на вторую матрицу (должна быть размера m×k)
 * @return 0 при успехе, -1 если размеры матриц несовместимы
 * @note Размер m1 изменится на n×k после умножения
 */
int matrixMul(Matrix *m1, const Matrix *m2);

/**
 * @brief Матричное умножение с сохранением в отдельную матрицу (outMatrix = m1 * m2).
 * @param outMatrix Указатель на результирующую матрицу
 * @param m1 Указатель на первую матрицу (должна быть размера n×m)
 * @param m2 Указатель на вторую матрицу (должна быть размера m×k)
 * @return 0 при успехе, -1 если размеры матриц несовместимы
 * @note Матрица outMatrix должна быть заранее инициализирована с размером n×k
 */
int matrixMulSecond(Matrix *outMatrix, Matrix *m1, const Matrix *m2);

#endif //MYMATRIX_MTX_OPS_H
